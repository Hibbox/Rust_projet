{"$message_type":"diagnostic","message":"the name `io` is defined multiple times","code":{"code":"E0252","explanation":"Two items of the same name cannot be imported without rebinding one of the\nitems under a new local name.\n\nErroneous code example:\n\n```compile_fail,E0252\nuse foo::baz;\nuse bar::baz; // error, do `use bar::baz as quux` instead\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse foo::baz as foo_baz;\nuse bar::baz; // ok!\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nOr you can reference the item with its parent:\n\n```\nuse bar::baz;\n\nfn main() {\n    let x = foo::baz; // ok!\n}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n"},"level":"error","spans":[{"file_name":"src/reverse.rs","byte_start":85,"byte_end":89,"line_start":4,"line_end":4,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"use tokio::io::{self, AsyncReadExt, AsyncWriteExt};","highlight_start":17,"highlight_end":21}],"label":"`io` reimported here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/reverse.rs","byte_start":60,"byte_end":67,"line_start":3,"line_end":3,"column_start":5,"column_end":12,"is_primary":false,"text":[{"text":"use std::io;","highlight_start":5,"highlight_end":12}],"label":"previous import of the module `io` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`io` must be defined only once in the type namespace of this module","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `as` to change the binding name of the import","code":null,"level":"help","spans":[{"file_name":"src/reverse.rs","byte_start":85,"byte_end":89,"line_start":4,"line_end":4,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"use tokio::io::{self, AsyncReadExt, AsyncWriteExt};","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":"self as other_io","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0252]\u001b[0m\u001b[0m\u001b[1m: the name `io` is defined multiple times\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/reverse.rs:4:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::io;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mprevious import of the module `io` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tokio::io::{self, AsyncReadExt, AsyncWriteExt};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`io` reimported here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `io` must be defined only once in the type namespace of this module\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can use `as` to change the binding name of the import\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse tokio::io::{\u001b[0m\u001b[0m\u001b[38;5;10mself as other_io\u001b[0m\u001b[0m, AsyncReadExt, AsyncWriteExt};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find function `spawn` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/reverse.rs","byte_start":555,"byte_end":560,"line_start":20,"line_end":20,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"        spawn (async move {","highlight_start":9,"highlight_end":14}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src/reverse.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use tokio::net::TcpListener;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use actix_web::rt::spawn;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/reverse.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use tokio::net::TcpListener;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::thread::spawn;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/reverse.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use tokio::net::TcpListener;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use tokio::spawn;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function `spawn` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/reverse.rs:20:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        spawn (async move {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use actix_web::rt::spawn;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use std::thread::spawn;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use tokio::spawn;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `server` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/reverse.rs","byte_start":629,"byte_end":635,"line_start":21,"line_end":21,"column_start":55,"column_end":61,"is_primary":true,"text":[{"text":"            if let Err(e) = handle_connection(socket, server).await{","highlight_start":55,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a local variable with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src/reverse.rs","byte_start":629,"byte_end":635,"line_start":21,"line_end":21,"column_start":55,"column_end":61,"is_primary":true,"text":[{"text":"            if let Err(e) = handle_connection(socket, server).await{","highlight_start":55,"highlight_end":61}],"label":null,"suggested_replacement":"servers","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `server` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/reverse.rs:21:55\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if let Err(e) = handle_connection(socket, server).await{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a local variable with a similar name exists: `servers`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/reverse.rs","byte_start":85,"byte_end":89,"line_start":4,"line_end":4,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"use tokio::io::{self, AsyncReadExt, AsyncWriteExt};","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/reverse.rs","byte_start":85,"byte_end":91,"line_start":4,"line_end":4,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"use tokio::io::{self, AsyncReadExt, AsyncWriteExt};","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/reverse.rs:4:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tokio::io::{self, AsyncReadExt, AsyncWriteExt};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `rand`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/reverse.rs","byte_start":1006,"byte_end":1010,"line_start":30,"line_end":30,"column_start":19,"column_end":23,"is_primary":true,"text":[{"text":"    let mut rng = rand::thread_rng();","highlight_start":19,"highlight_end":23}],"label":"use of undeclared crate or module `rand`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `rand`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/reverse.rs:30:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut rng = rand::thread_rng();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `rand`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `choose` found for struct `Arc<Vec<&str>>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/reverse.rs","byte_start":1058,"byte_end":1064,"line_start":31,"line_end":31,"column_start":33,"column_end":39,"is_primary":true,"text":[{"text":"    let server_choice = servers.choose(&mut rng).ok_or(\"Auccun server disponible\")?; // selectionne aleatoirement un serveur","highlight_start":33,"highlight_end":39}],"label":"method not found in `Arc<Vec<&str>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait is implemented but not in scope; perhaps add a `use` for it:","code":null,"level":"help","spans":[{"file_name":"src/reverse.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use tokio::net::TcpListener;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rand::seq::SliceRandom;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `choose` found for struct `Arc<Vec<&str>>` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/reverse.rs:31:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let server_choice = servers.choose(&mut rng).ok_or(\"Auccun server disponible\")?; // selectionne aleatoirement un serveur\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Arc<Vec<&str>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the following trait is implemented but not in scope; perhaps add a `use` for it:\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use rand::seq::SliceRandom;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected function, found macro `println`","code":{"code":"E0423","explanation":"An identifier was used like a function name or a value was expected and the\nidentifier exists but it belongs to a different namespace.\n\nErroneous code example:\n\n```compile_fail,E0423\nstruct Foo { a: bool };\n\nlet f = Foo();\n// error: expected function, tuple struct or tuple variant, found `Foo`\n// `Foo` is a struct name, but this expression uses it like a function name\n```\n\nPlease verify you didn't misspell the name of what you actually wanted to use\nhere. Example:\n\n```\nfn Foo() -> u32 { 0 }\n\nlet f = Foo(); // ok!\n```\n\nIt is common to forget the trailing `!` on macro invocations, which would also\nyield this error:\n\n```compile_fail,E0423\nprintln(\"\");\n// error: expected function, tuple struct or tuple variant,\n// found macro `println`\n// did you mean `println!(...)`? (notice the trailing `!`)\n```\n\nAnother case where this error is emitted is when a value is expected, but\nsomething else is found:\n\n```compile_fail,E0423\npub mod a {\n    pub const I: i32 = 1;\n}\n\nfn h1() -> i32 {\n    a.I\n    //~^ ERROR expected value, found module `a`\n    // did you mean `a::I`?\n}\n```\n"},"level":"error","spans":[{"file_name":"src/reverse.rs","byte_start":399,"byte_end":406,"line_start":14,"line_end":14,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    println(\"ecoute socket port 8080\");","highlight_start":5,"highlight_end":12}],"label":"not a function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `!` to invoke the macro","code":null,"level":"help","spans":[{"file_name":"src/reverse.rs","byte_start":406,"byte_end":406,"line_start":14,"line_end":14,"column_start":12,"column_end":12,"is_primary":true,"text":[{"text":"    println(\"ecoute socket port 8080\");","highlight_start":12,"highlight_end":12}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0423]\u001b[0m\u001b[0m\u001b[1m: expected function, found macro `println`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/reverse.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    println(\"ecoute socket port 8080\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot a function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `!` to invoke the macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    println\u001b[0m\u001b[0m\u001b[38;5;10m!\u001b[0m\u001b[0m(\"ecoute socket port 8080\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`Result<(), std::io::Error>` is not a future","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1040,"byte_end":1070,"line_start":29,"line_end":29,"column_start":39,"column_end":69,"is_primary":true,"text":[{"text":"        let proxy_task = tokio::spawn(reverse::start_reverse_proxy());","highlight_start":39,"highlight_end":69}],"label":"`Result<(), std::io::Error>` is not a future","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1027,"byte_end":1039,"line_start":29,"line_end":29,"column_start":26,"column_end":38,"is_primary":false,"text":[{"text":"        let proxy_task = tokio::spawn(reverse::start_reverse_proxy());","highlight_start":26,"highlight_end":38}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::future::Future` is not implemented for `Result<(), std::io::Error>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tokio::spawn`","code":null,"level":"note","spans":[{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/task/spawn.rs","byte_start":5154,"byte_end":5159,"line_start":164,"line_end":164,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>","highlight_start":12,"highlight_end":17}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/task/spawn.rs","byte_start":5220,"byte_end":5226,"line_start":166,"line_end":166,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"        F: Future + Send + 'static,","highlight_start":12,"highlight_end":18}],"label":"required by this bound in `spawn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `Result<(), std::io::Error>` is not a future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:29:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let proxy_task = tokio::spawn(reverse::start_reverse_proxy());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Result<(), std::io::Error>` is not a future\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::future::Future` is not implemented for `Result<(), std::io::Error>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tokio::spawn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/task/spawn.rs:166:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        F: Future + Send + 'static,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `spawn`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":6011,"byte_end":6079,"line_start":175,"line_end":175,"column_start":42,"column_end":110,"is_primary":true,"text":[{"text":"                        return Ready(Err(fut.take_output().expect(\"expected completed future\").err().unwrap()))","highlight_start":42,"highlight_end":110}],"label":"expected `JoinError`, found `Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":7091,"byte_end":7165,"line_start":208,"line_end":208,"column_start":7,"column_end":81,"is_primary":false,"text":[{"text":"      $crate::try_join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":7,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":7091,"byte_end":7165,"line_start":208,"line_end":208,"column_start":7,"column_end":81,"is_primary":false,"text":[{"text":"      $crate::try_join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":7,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":7245,"byte_end":7283,"line_start":214,"line_end":214,"column_start":9,"column_end":47,"is_primary":false,"text":[{"text":"        $crate::try_join!(@{ () (0) } $($e,)*)","highlight_start":9,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":1571,"byte_end":1624,"line_start":48,"line_end":48,"column_start":9,"column_end":62,"is_primary":false,"text":[{"text":"        tokio::try_join!(proxy_task, server_8081,server_8082)?;","highlight_start":9,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tokio::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":6007,"byte_end":6010,"line_start":175,"line_end":175,"column_start":38,"column_end":41,"is_primary":false,"text":[{"text":"                        return Ready(Err(fut.take_output().expect(\"expected completed future\").err().unwrap()))","highlight_start":38,"highlight_end":41}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":7091,"byte_end":7165,"line_start":208,"line_end":208,"column_start":7,"column_end":81,"is_primary":false,"text":[{"text":"      $crate::try_join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":7,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":7091,"byte_end":7165,"line_start":208,"line_end":208,"column_start":7,"column_end":81,"is_primary":false,"text":[{"text":"      $crate::try_join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":7,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":7245,"byte_end":7283,"line_start":214,"line_end":214,"column_start":9,"column_end":47,"is_primary":false,"text":[{"text":"        $crate::try_join!(@{ () (0) } $($e,)*)","highlight_start":9,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":1571,"byte_end":1624,"line_start":48,"line_end":48,"column_start":9,"column_end":62,"is_primary":false,"text":[{"text":"        tokio::try_join!(proxy_task, server_8081,server_8082)?;","highlight_start":9,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tokio::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the type constructed contains `std::io::Error` due to the type of the argument passed","code":null,"level":"help","spans":[{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":6011,"byte_end":6079,"line_start":175,"line_end":175,"column_start":42,"column_end":110,"is_primary":false,"text":[{"text":"                        return Ready(Err(fut.take_output().expect(\"expected completed future\").err().unwrap()))","highlight_start":42,"highlight_end":110}],"label":"this argument influences the type of `Err`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":7091,"byte_end":7165,"line_start":208,"line_end":208,"column_start":7,"column_end":81,"is_primary":false,"text":[{"text":"      $crate::try_join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":7,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":7091,"byte_end":7165,"line_start":208,"line_end":208,"column_start":7,"column_end":81,"is_primary":false,"text":[{"text":"      $crate::try_join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":7,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":7245,"byte_end":7283,"line_start":214,"line_end":214,"column_start":9,"column_end":47,"is_primary":false,"text":[{"text":"        $crate::try_join!(@{ () (0) } $($e,)*)","highlight_start":9,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":1571,"byte_end":1624,"line_start":48,"line_end":48,"column_start":9,"column_end":62,"is_primary":false,"text":[{"text":"        tokio::try_join!(proxy_task, server_8081,server_8082)?;","highlight_start":9,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tokio::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":6007,"byte_end":6080,"line_start":175,"line_end":175,"column_start":38,"column_end":111,"is_primary":true,"text":[{"text":"                        return Ready(Err(fut.take_output().expect(\"expected completed future\").err().unwrap()))","highlight_start":38,"highlight_end":111}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":7091,"byte_end":7165,"line_start":208,"line_end":208,"column_start":7,"column_end":81,"is_primary":false,"text":[{"text":"      $crate::try_join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":7,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":7091,"byte_end":7165,"line_start":208,"line_end":208,"column_start":7,"column_end":81,"is_primary":false,"text":[{"text":"      $crate::try_join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) $e, } $($r)*)","highlight_start":7,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":7245,"byte_end":7283,"line_start":214,"line_end":214,"column_start":9,"column_end":47,"is_primary":false,"text":[{"text":"        $crate::try_join!(@{ () (0) } $($e,)*)","highlight_start":9,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":1571,"byte_end":1624,"line_start":48,"line_end":48,"column_start":9,"column_end":62,"is_primary":false,"text":[{"text":"        tokio::try_join!(proxy_task, server_8081,server_8082)?;","highlight_start":9,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tokio::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_join!","def_site_span":{"file_name":"/home/roro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.36.0/src/macros/try_join.rs","byte_start":3039,"byte_end":3060,"line_start":103,"line_end":103,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_join {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"/home/roro/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs","byte_start":18540,"byte_end":18543,"line_start":511,"line_end":511,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:48:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        tokio::try_join!(proxy_task, server_8081,server_8082)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `JoinError`, found `Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the type constructed contains `std::io::Error` due to the type of the argument passed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:48:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        tokio::try_join!(proxy_task, server_8081,server_8082)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis argument influences the type of `Err`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/roro/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::try_join` which comes from the expansion of the macro `tokio::try_join` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`Result<(), std::io::Error>` is not a future","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1027,"byte_end":1039,"line_start":29,"line_end":29,"column_start":26,"column_end":38,"is_primary":true,"text":[{"text":"        let proxy_task = tokio::spawn(reverse::start_reverse_proxy());","highlight_start":26,"highlight_end":38}],"label":"`Result<(), std::io::Error>` is not a future","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::future::Future` is not implemented for `Result<(), std::io::Error>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `Result<(), std::io::Error>` is not a future\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:29:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let proxy_task = tokio::spawn(reverse::start_reverse_proxy());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Result<(), std::io::Error>` is not a future\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::future::Future` is not implemented for `Result<(), std::io::Error>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: Result<(), std::io::Error> must be a future or must implement `IntoFuture` to be awaited\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 9 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 9 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0252, E0277, E0308, E0423, E0425, E0433, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0252, E0277, E0308, E0423, E0425, E0433, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0252`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0252`.\u001b[0m\n"}
